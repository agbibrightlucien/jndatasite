const express = require('express');
const router = express.Router();
const Vendor = require('../models/Vendor');
const DataBundle = require('../models/DataBundle');
const { generateToken } = require('../utils/jwt');
const authMiddleware = require('../middleware/auth');
const { validateLogin, validateRegistration } = require('../middleware/validation');

// Public route to get vendor details by vendorLink
router.get('/link/:vendorLink', async (req, res) => {
  try {
    const { vendorLink } = req.params;
    
    // Find vendor by vendorLink
    const vendor = await Vendor.findOne({ vendorLink });
    if (!vendor) {
      return res.status(404).json({ error: 'Vendor not found' });
    }

    // Get base bundles
    const bundles = await DataBundle.find();

    // Return only public information
    const publicVendorInfo = {
      name: vendor.name,
      vendorLink: vendor.vendorLink,
      bundles
    };

    res.json(publicVendorInfo);
  } catch (error) {
    res.status(500).json({ error: 'Error fetching vendor details' });
  }
});

// Protected vendor routes
router.use(authMiddleware, roleAuth(['vendor']));


// Vendor registration route
router.post('/register', validateRegistration, async (req, res) => {
  try {
    const { name, email, password } = req.body;

    // Check if vendor already exists
    const existingVendor = await Vendor.findOne({ email });
    if (existingVendor) {
      return res.status(400).json({ error: 'Email already registered' });
    }

    // Create new vendor
    const vendor = new Vendor({
      name,
      email,
      password
    });

    // Save vendor (password will be hashed and vendorLink will be generated by pre-save middleware)
    await vendor.save();

    // Return success without password
    const vendorWithoutPassword = vendor.toObject();
    delete vendorWithoutPassword.password;

    res.status(201).json(vendorWithoutPassword);
  } catch (error) {
    res.status(500).json({ error: 'Error creating vendor account' });
  }
});

// Vendor login route
router.post('/login', validateLogin, async (req, res) => {
  try {
    const { email, password } = req.body;

    // Find vendor by email
    const vendor = await Vendor.findOne({ email });
    if (!vendor) {
      return res.status(401).json({ error: 'Invalid credentials' });
    }

    // Verify password
    const isValidPassword = await vendor.comparePassword(password);
    if (!isValidPassword) {
      return res.status(401).json({ error: 'Invalid credentials' });
    }

    // Generate JWT token
    const token = generateToken({
      id: vendor._id,
      role: vendor.role
    });

    // Return vendor info and token
    const vendorWithoutPassword = vendor.toObject();
    delete vendorWithoutPassword.password;

    res.json({
      vendor: vendorWithoutPassword,
      token
    });
  } catch (error) {
    res.status(500).json({ error: 'Error during login' });
  }
});

module.exports = router;